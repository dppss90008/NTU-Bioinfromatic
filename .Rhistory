# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
rm(LogC,qx,ex)
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
rm(sml,sel)
# Limma package analysis
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
rm(fl)
# 2 matrix : control vs 1hr, control vs 4hr
cont.matrix1 <- makeContrasts(G1-G0, levels=design)
cont.matrix2 <- makeContrasts(G2-G0, levels=design)
cont.matrix3 <- makeContrasts(G2-G1, levels=design)
Constrast <- function(cont.matrix){
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="none", number=42418)
#  tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","F","SEQUENCE","GB_ACC","ORF","miRNA_ID"))
#  sort the data by ID
tT <- tT[order(tT$ID),]
return(tT)
}
# 3 matrix : tT1 <- control vs 1hr, tT2 <- control vs 4hr
tT1 <- Constrast(cont.matrix1)
# rm(cont.matrix1,cont.matrix2,design,fit)
tT1 <- tT1[tT1$adj.P.Val<0.05,]
tT1 <- tT1[tT1$logFC>1|tT1$logFC<-1,]
tT1 <- tT1[tT1$logFC>1|tT1$logFC< -1,]
# group names for all samples
gsms <- "XXX111XXX000XXXXXXXXX"
# Cut string int character vector
sml <- c()
# make proper column names to match toptable
# Avoid ex. "x1 2 3" exchange it into variable name
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- "XXX111XXX000XXXXXXXXX"
# Cut string int character vector
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
rm(gsms,i)
# eliminate samples marked as "X"
# final samples : Control、Oxidative stress 1hr、Oxidative stress 4hr
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
rm(LogC,qx,ex)
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
rm(sml,sel)
# Limma package analysis
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
rm(fl)
# 2 matrix : control vs 1hr, control vs 4hr
cont.matrix1 <- makeContrasts(G1-G0, levels=design)
Constrast <- function(cont.matrix){
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="none", number=42418)
#  tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","F","SEQUENCE","GB_ACC","ORF","miRNA_ID"))
#  sort the data by ID
tT <- tT[order(tT$ID),]
return(tT)
}
# 3 matrix : tT1 <- control vs 1hr, tT2 <- control vs 4hr
tT1 <- Constrast(cont.matrix1)
# rm(cont.matrix1,cont.matrix2,design,fit)
tT1 <- tT1[tT1$adj.P.Val<0.05,]
tT1 <- tT1[tT1$logFC>1|tT1$logFC< -1,]
gset <- getGEO("GSE19983", GSEMatrix =TRUE, AnnotGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL9956", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
rm(idx)
# make proper column names to match toptable
# Avoid ex. "x1 2 3" exchange it into variable name
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- "XXX111XXX000XXXXXXXXX"
# Cut string int character vector
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
rm(gsms,i)
# eliminate samples marked as "X"
# final samples : Control、Oxidative stress 1hr、Oxidative stress 4hr
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
rm(LogC,qx,ex)
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
rm(sml,sel)
# Limma package analysis
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
rm(fl)
# 2 matrix : control vs 1hr, control vs 4hr
cont.matrix1 <- makeContrasts(G1-G0, levels=design)
Constrast <- function(cont.matrix){
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="none", number=42418)
#  tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","F","SEQUENCE","GB_ACC","ORF","miRNA_ID"))
#  sort the data by ID
tT <- tT[order(tT$ID),]
return(tT)
}
# 3 matrix : tT1 <- control vs 1hr, tT2 <- control vs 4hr
tT1 <- Constrast(cont.matrix1)
# rm(cont.matrix1,cont.matrix2,design,fit)
tT1 <- tT1[tT1$adj.P.Val<0.05,]
tT1 <- tT1[tT1$logFC>1|tT1$logFC< -1,]
################################################################
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
gset <- getGEO("GSE19983", GSEMatrix =TRUE, AnnotGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL9956", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
View(gset)
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- "XXX111XXX000XXXXXXXXX"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transform
ex <- exprs(gset)
View(ex)
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
design
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", number=42417)
View(tT)
select <- tT$adj.P.Val<0.05 & (tT$logFC>1|tT$logFC< -1)
LOG10 <- sapply(tT$adj.P.Val,function(x){
return(-log10(x))
})
tT <- cbind(tT,LOG10)
tT <- cbind(tT,select)
library(ggplot2)
ggplot(tT,aes(x=logFC,y=LOG10,color=select),xlim=c(-2.5,2)) + geom_point()
select <- tT$adj.P.Val<0.05 & (tT$logFC>1|tT$logFC< -1)
select <- tT$adj.P.Val<0.05 & (tT$logFC>1|tT$logFC< -1)
summary(select)
write.table(tT, file=stdout(), row.names=F, sep="\t")
write.table(tT, file="H2O2tT.csv", row.names=F, sep="\t")
setwd("E://Bioinfotmatic code")
write.table(tT, file="H2O2tT.csv", row.names=F, sep="\t")
################################################################
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
gset <- getGEO("GSE39429", GSEMatrix =TRUE, AnnotGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL6864", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- paste0("000XXXXXXXX111XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
View(ex)
View(ex)
nrow(ex)
tT <- topTable(fit2, adjust="fdr", sort.by="none", number=nrow(ex))
View(tT)
tT <- subset(tT, select=c("ID","adj.P.Val","P.Value","t","B","logFC","GB_ACC","ORF","miRNA_ID","SEQUENCE","SPOT_ID"))
View(tT)
tT <- topTable(fit2, adjust="fdr", sort.by="none", number=nrow(ex))
View(tT)
View(tT)
tT <- subset(tT, select=c("Accessions","adj.P.Val","P.Value","t","B","logFC","GB_ACC","ORF","miRNA_ID","SEQUENCE","SPOT_ID"))
View(tT)
t <- tT$SEQUENCE==""
summary(t)
t <- tT$Accessions!=""
summary(t)
tT <- cbind(tT,t)
View(tT)
tT <- topTable(fit2, adjust="fdr", sort.by="none", number=nrow(ex))
View(tT)
t <- tT$Accessions!=""
View(tT)
summary(t)
t <- tT$Accessions!=""
View(tT)
t <- tT$Accessions!=""
tT <- cbind(tT,t)
View(tT)
tT <- topTable(fit2, adjust="fdr", number=nrow(ex))
View(tT)
View(tT)
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
################################################################
#   Differential expression analysis with limma
library(Biobase)
library(GEOquery)
library(limma)
gset <- getGEO("GSE39429", GSEMatrix =TRUE, AnnotGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL6864", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- paste0("000XXXXXXXX111XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", number=nrow(ex))
View(tT)
View(gset)
test <- gset$title
test
test <- gset$`treatment:ch1`
test
View(gset)
View(tT)
tT <- topTable(fit2, adjust="fdr",sort.by = "none",number=42417)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr",sort.by = "none",number=42417)
View(tT)
fvarLabels(gset)
fl
View(fit2)
nrow(ex)
View(ex)
gset <- getGEO("GSE39429", GSEMatrix =TRUE, AnnotGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL6864", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- paste0("000XXXXXXXX111XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transform
ex <- exprs(gset)
View(ex)
library(Biobase)
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE19983", GSEMatrix =TRUE, AnnotGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL9956", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- "XXX111XXX000XXXXXXXXX"
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transform
ex <- exprs(gset)
View(ex)
library(Biobase)
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE39429", GSEMatrix =TRUE, AnnotGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL6864", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- paste0("000XXXXXXXX111XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sel
sml <- sml[sel]
sml
gset <- gset[ ,sel]
gset
# log2 transform
ex <- exprs(gset)
View(ex)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
fit2
tT <- topTable(fit2, adjust="fdr",sort.by = "none",number=45145)
View(tT)
length(subset (fData(gset))$GENE)
gset <- getGEO("GSE39429", GSEMatrix =TRUE, AnnotGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL6864", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
gset <- getGEO("GSE39429", GSEMatrix =TRUE, AnnotGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL6864", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- paste0("000XXXXXXXX111XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=nrow(ex))
summary(tT$SEQUENCE!="")
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=9999999999)
View(tT)
library(Biobase)
library(GEOquery)
library(limma)
# load series and platform data from GEO
gset <- getGEO("GSE39429", GSEMatrix =TRUE, AnnotGPL=FALSE)
if (length(gset) > 1) idx <- grep("GPL6864", attr(gset, "names")) else idx <- 1
gset <- gset[[idx]]
# make proper column names to match toptable
fvarLabels(gset) <- make.names(fvarLabels(gset))
# group names for all samples
gsms <- paste0("000XXXXXXXX111XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX",
"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX")
sml <- c()
for (i in 1:nchar(gsms)) { sml[i] <- substr(gsms,i,i) }
# eliminate samples marked as "X"
sel <- which(sml != "X")
sml <- sml[sel]
gset <- gset[ ,sel]
# log2 transform
ex <- exprs(gset)
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
# set up the data and proceed with analysis
sml <- paste("G", sml, sep="")    # set group names
fl <- as.factor(sml)
gset$description <- fl
design <- model.matrix(~ description + 0, gset)
colnames(design) <- levels(fl)
fit <- lmFit(gset, design)
cont.matrix <- makeContrasts(G1-G0, levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2, 0.01)
tT <- topTable(fit2, adjust="fdr", sort.by="B", number=999999999999)
View(tT)
View(tT)
rep("GPL6864", attr(gset, "names"))
test <- grep("GPL6864", attr(gset, "names"))
test
idx
gset[[idx]]
View(gset)
gset
